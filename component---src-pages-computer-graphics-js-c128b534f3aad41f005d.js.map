{"version":3,"file":"component---src-pages-computer-graphics-js-c128b534f3aad41f005d.js","mappings":"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","sources":["webpack://portfolio/./src/components/Card.js","webpack://portfolio/./src/components/Footer.js","webpack://portfolio/./src/images/computer-graphics/volume-renderer.png","webpack://portfolio/./src/images/computer-graphics/path-tracer.png","webpack://portfolio/./src/images/computer-graphics/face-swap.gif","webpack://portfolio/./src/images/computer-graphics/mesh-editor.png","webpack://portfolio/./src/images/computer-graphics/gpu-path-tracer.gif","webpack://portfolio/./src/images/computer-graphics/beat-the-illusion.png","webpack://portfolio/./src/images/computer-graphics/beat-the-illusion.mp4","webpack://portfolio/./src/images/computer-graphics/pbr-shaders.png","webpack://portfolio/./src/images/computer-graphics/opengl-shaders.png","webpack://portfolio/./src/images/computer-graphics/opengl-shaders.mp4","webpack://portfolio/./src/images/computer-graphics/volume-renderer-grayscale.png","webpack://portfolio/./src/images/computer-graphics/volume-renderer-rgb.png","webpack://portfolio/./src/components/VolumeRenderer.js","webpack://portfolio/./src/components/PathTracer.js","webpack://portfolio/./src/components/GPUPathTracer.js","webpack://portfolio/./src/components/FaceSwap.js","webpack://portfolio/./src/pages/computer-graphics.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"gatsby-link\";\nimport Tag from \"./Tag\";\n\n\nconst Card = ({ color, image, title, year, link, skills, subtitle, video, modalImgs, description, descriptionFirst }) => {\n    const [showModal, setShowModal] = useState(false);\n    \n    return (\n        <div class=\"\">\n            <button type=\"button\" class={`${color} rounded w-[280px] h-[200px] lg:w-[350px] lg:h-[250px]`} onClick={() => setShowModal(true)} >\n                <img src={image} class=\"max-w-[250px] max-h-[165px] lg:max-w-[290px] lg:max-h-[210px] m-auto ease-in-out duration-200 hover:scale-[1.02] hover:drop-shadow-[0px_0px_8px_rgba(0,0,0,0.4)]\"/>\n            </button>\n            \n            <p class=\"text-md text-black text-wrap max-w-[280px] lg:max-w-[360px] font-medium hover:text-black text-center mt-2\">{title}</p>\n            \n\n            {showModal\n            && (\n                <div onClick={() => setShowModal(false)} class=\"flex justify-center items-center bg-gray bg-opacity-75 backdrop-blur-sm fixed min-h-[100vh] min-w-[100vw] top-0 left-0 z-20 overflow-x-hidden overflow-y-auto\">\n                    <div class=\"relative m-auto bg-white-smoke p-6 rounded-lg shadow-xl w-[80%] lg:w-[60%] max-h-[90vh] overflow-auto\">\n                        <button type=\"button\" class=\"text-xl md:text-2xl text-charcoal float-right relative -right-3 -top-5\" onClick={() => setShowModal(false)}>×</button>\n                        \n                        <div class=\"md:float-left inline w-[80%]\">\n                            <p class=\"font-bold text-xl\">{title}</p>\n                            <p class=\"text-sm\">{subtitle}</p>\n                            <div class=\"md:mb-3\">\n                                {skills.map(skill => (<Tag tag={skill}/>))}\n                            </div>\n                        </div>\n\n                        <div class=\"mb-4 md:float-right lg:inline md:text-right md:mt-2 mt-2\">\n                            {year && <p class=\"md:-mr-1 mb-2 lg:mb-0 inline md:block mr-2 text-sm lg:text-base md:text-right\">Created in {year}</p>}\n                            {link && \n                            <a \n                                href={link}\n                                class=\"inline text-sm lg:text-base bg-maroon text-white-smoke px-2.5 py-1 my-2 lg:inline-block rounded-md hover:bg-salmon hover:text-white-smoke\">\n                                    View code\n                            </a>}\n                        </div>\n\n                        {descriptionFirst ? \n                            <>\n                                <p class=\"clear-both\">{description} </p>\n\n                                {modalImgs && modalImgs.map(img => (<img src={img} class=\"px-8 py-4 max-w-[85%] m-auto clear-both\"/>))}\n                                {video && \n                                <>\n                                    <div class=\"relative pb-[50%] mt-2 clear-both\">\n                                        <iframe src={video} frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen class=\"absolute top-0 left-0 w-full h-full\" title=\"Volume Renderer for Medical Imaging\"></iframe></div><script src=\"https://player.vimeo.com/api/player.js\"></script>\n                                </>}\n                            </> \n                        :\n                            <>\n                                {modalImgs && modalImgs.map(img => (<img src={img} class=\"px-8 py-4 max-w-[85%] m-auto clear-both\"/>))}\n                                {video && \n                                <>\n                                    <div class=\"relative pb-[50%] mt-2 clear-both\">\n                                        <iframe src={video} frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen class=\"absolute top-0 left-0 w-full h-full\" title=\"Volume Renderer for Medical Imaging\"></iframe></div><script src=\"https://player.vimeo.com/api/player.js\"></script>\n                                </>}\n\n                                <p class=\"clear-both\">{description} </p>\n                            </>\n                        }\n                    </div>\n                </div>\n            )}\n        </div>\n\n    )\n}\n\nexport default Card;","import React from \"react\";\n\nconst svgStyle = \"mx-3 inline-block hover:scale-110 ease-in-out duration-200\";\n\nconst Footer = () => {\n    return (\n        <div class=\"m-auto pt-8 pb-6 bg-white-smoke sticky bottom-0\">\n          <div class=\"flex justify-center\">\n              <a href=\"mailto:nicolechau524@gmail.com\" target=\"_blank\">\n                <svg class={svgStyle} width=\"25\" height=\"25\" id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 383.23 269.46\">\n                  <path fill=\"#243671\" d=\"m383.23,241.78c-1.24,2.65-2.48,5.3-3.58,7.66-38.36-38.35-76.7-76.7-114.92-114.92,37.97-37.92,76.31-76.2,114.89-114.71,1.13,2.69,2.38,5.67,3.62,8.64v213.33Z\"/>\n                  <path fill=\"#243671\" d=\"m18.69,2.52C24.63,1.6,29.72.11,34.81.1c103.89-.14,207.78-.14,311.67,0,5.48,0,10.96,1.42,16.44,2.17.19.53.37,1.06.56,1.58-1.29.97-2.71,1.8-3.84,2.92-23.22,23.17-46.44,46.33-69.58,69.59-29.44,29.59-58.91,59.15-88.12,88.97-5.84,5.96-15.61,5.89-21.4.04C127.4,111.69,74.04,58.21,20.74,4.67c-.35-.35-.68-.71-2.05-2.15Z\"/>\n                  <path fill=\"#243671\" d=\"m19.01,266.86c38.98-39.03,77.22-77.31,115.68-115.81.76.68,1.6,1.35,2.36,2.11,10.15,10.13,20.23,20.34,30.45,30.4,6.51,6.41,14.67,9.61,23.63,9.42,9.45-.2,18.03-3.39,24.91-10.4,9.79-9.97,19.78-19.73,29.56-29.7,1.98-2.02,3.17-1.91,5.09.04,10.04,10.24,20.23,20.33,30.34,30.51,26.95,27.15,53.88,54.32,80.82,81.48.34.35.67.72,1.73,1.86-4.45.98-8.32,2.57-12.19,2.58-106.88.14-213.77.14-320.65,0-3.72,0-7.44-1.55-11.72-2.5Z\"/>\n                  <path fill=\"#243671\" d=\"m2.96,251.3c-1.16-5.03-2.83-8.94-2.84-12.85C-.04,169.35-.04,100.24.11,31.14c0-3.94,1.59-7.87,2.45-11.81.42-.09.85-.17,1.27-.26,38.11,38.48,76.22,76.95,114.57,115.66C80.28,173.23,42.1,211.77,2.96,251.3Z\"/>\n                </svg>\n              </a>\n\n              <a href=\"https://github.com/nicole-chau\" target=\"_blank\">\n                <svg class={svgStyle} width=\"25\" height=\"25\" viewBox=\"0 0 98 96\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M48.854 0C21.839 0 0 22 0 49.217C0 70.973 13.993 89.389 33.405 95.907C35.832 96.397 36.721 94.848 36.721 93.545C36.721 92.404 36.641 88.493 36.641 84.418C23.051 87.352 20.221 78.551 20.221 78.551C18.037 72.847 14.801 71.381 14.801 71.381C10.353 68.366 15.125 68.366 15.125 68.366C20.059 68.692 22.648 73.418 22.648 73.418C27.015 80.914 34.052 78.796 36.883 77.492C37.287 74.314 38.582 72.114 39.957 70.892C29.118 69.751 17.714 65.514 17.714 46.609C17.714 41.231 19.654 36.831 22.728 33.409C22.243 32.187 20.544 27.134 23.214 20.371C23.214 20.371 27.339 19.067 36.64 25.423C40.6221 24.3457 44.7288 23.7976 48.854 23.793C52.979 23.793 57.184 24.364 61.067 25.423C70.369 19.067 74.494 20.371 74.494 20.371C77.164 27.134 75.464 32.187 74.979 33.409C78.134 36.831 79.994 41.231 79.994 46.609C79.994 65.514 68.59 69.669 57.67 70.892C59.45 72.44 60.986 75.373 60.986 80.018C60.986 86.618 60.906 91.915 60.906 93.544C60.906 94.848 61.796 96.397 64.222 95.908C83.634 89.388 97.627 70.973 97.627 49.217C97.707 22 75.788 0 48.854 0Z\" fill=\"#243671\"/>\n                </svg>\n              </a>\n\n              <a href=\"https://www.linkedin.com/in/nicole-chau/\" target=\"_blank\">\n                <svg class={svgStyle} width=\"25\" height=\"25\" viewBox=\"0 0 409 409\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M-9.76585e-06 375.15V33.52C0.62999 33.39 0.71999 32.92 0.83999 32.38C3.49999 21.2 9.27999 12.38 19.32 6.25C24.08 3.35 29.23 1.87 34.31 0H373.49C373.62 0.64 374.11 0.68 374.65 0.78C383.6 2.4 391.17 6.76 397.36 13.23C405.48 21.72 408.59 32.28 408.59 43.83C408.61 150.88 408.61 257.93 408.55 364.98C408.55 368.88 408.24 372.88 407.34 376.65C405.12 385.98 400.2 393.65 392.55 399.65C385.73 404.99 378.19 408.58 369.56 408.59C259.87 408.69 150.18 408.66 40.48 408.65C26.15 408.65 15.3 402.18 7.00999 390.75C3.54999 385.99 2.16999 380.41 -0.0100098 375.14L-9.76585e-06 375.15ZM224.78 187.63C224.78 180.2 224.63 173.83 224.85 167.48C224.95 164.48 224.3 163.42 221 163.46C203.05 163.64 185.09 163.62 167.14 163.47C164.18 163.45 163.44 164.13 163.44 167.14C163.54 226.07 163.54 284.99 163.44 343.92C163.44 346.75 164.17 347.4 166.94 347.38C184.89 347.25 202.85 347.22 220.8 347.4C224.21 347.43 224.86 346.41 224.85 343.18C224.72 309.39 224.83 275.61 224.73 241.82C224.7 233.86 226.4 226.67 231.4 220.28C238.97 210.61 250.55 207.17 262.1 209.87C277.22 213.4 286.03 226.35 286 242.13C285.94 275.92 286.03 309.7 285.9 343.49C285.89 346.69 286.79 347.41 289.87 347.38C307.82 347.23 325.78 347.21 343.73 347.4C346.91 347.43 347.32 346.4 347.31 343.61C347.19 324.59 347.46 305.56 347.19 286.55C346.9 265.59 348.19 244.62 346.44 223.67C345.78 215.77 343.78 208.34 340.4 201.34C331.83 183.59 318.25 171.05 299.84 163.99C289.84 160.16 279.18 158.07 268.72 159.97C251.07 163.18 235.96 171.44 224.78 187.64V187.63ZM61.36 255.46C61.36 284.71 61.41 313.95 61.29 343.2C61.28 346.34 61.77 347.44 65.27 347.4C83.08 347.19 100.89 347.24 118.7 347.37C121.7 347.39 122.71 346.8 122.71 343.52C122.6 284.76 122.61 226 122.69 167.24C122.69 164.34 122.11 163.43 119.02 163.46C101.08 163.62 83.13 163.62 65.19 163.46C62.12 163.43 61.27 164.15 61.28 167.32C61.41 196.7 61.36 226.08 61.36 255.46ZM91.31 55.87C70.71 54.5 56.03 72.9 54.97 89.59C53.65 110.49 71.62 129.75 92.64 128.66C112.06 127.65 128.36 112.59 128.37 91.97C128.37 73.01 113.62 54.94 91.3 55.87H91.31Z\" fill=\"#243671\"/>\n                </svg>\n              </a>\n            </div>\n\n            <p class=\"text-xs block text-center mt-4 text=navy\">&copy; 2024 Nicole Chau</p>\n          </div>\n    )\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/volume-renderer-926f5c3c8c5e36fd13b7e49862d9edbd.png\";","export default __webpack_public_path__ + \"static/path-tracer-c93affa5c49152879bc55e590227061c.png\";","export default __webpack_public_path__ + \"static/face-swap-4d434e3437a1524414b7aa8574e18f01.gif\";","export default __webpack_public_path__ + \"static/mesh-editor-3a1a96bb6738bb7f7a105f53b36785a6.png\";","export default __webpack_public_path__ + \"static/gpu-path-tracer-6f459a0a18ba91c54191f6cc63ffd624.gif\";","export default __webpack_public_path__ + \"static/beat-the-illusion-be35c9bfb4c66ecbf9ee2873b65266f6.png\";","export default __webpack_public_path__ + \"static/beat-the-illusion-4c1ff45e17b93dbefc09524b43342075.mp4\";","export default __webpack_public_path__ + \"static/pbr-shaders-6cbba2d4924f835c9f16f50f64c6db3b.png\";","export default __webpack_public_path__ + \"static/opengl-shaders-0863aef384ec64f4edeb9dfd65b982f9.png\";","export default __webpack_public_path__ + \"static/opengl-shaders-a7571cd64db6881f7eb086652fa6b885.mp4\";","export default __webpack_public_path__ + \"static/volume-renderer-grayscale-5e00a3fe5a64b2456f0aec374cd39701.png\";","export default __webpack_public_path__ + \"static/volume-renderer-rgb-ec06608eb843e2b079257e6b27478212.png\";","import React from \"react\";\nimport grayscale from \"../images/computer-graphics/volume-renderer-grayscale.png\"\nimport rgb from \"../images/computer-graphics/volume-renderer-rgb.png\"\n\nconst VolumeRenderer = () => {\n    return (\n        <div>\n            <h2>Overview</h2>\n\n            <p>\n            Developed as my undergraduate senior design project, this is an implementation of a volumetric renderer that can be used to view medical images (CT scans). \n            The goal is to provide a tool for visualizing 2D medical images in 3D space and provide interactive features for transforming the data or highlighting certain parts of the data using different colors.\n            </p>\n\n            <h2>Features</h2>\n            <ul>\n                <li>Load in DICOM dataset (directory containing series of .dcm files)</li>\n                <li>Volumetric rendering of loaded dataset (grayscale by default)</li>\n                <li>Ability to translate and rotate the dataset to view it from various angles</li>\n                <li>Option to apply a RGB transfer function to a user-defined range of Hounsfield unit values</li>\n            </ul>\n\n            <img \n                src={grayscale}\n                alt=\"volume renderer for medical imaging\"\n                class=\"w-600 m-auto\"\n            />\n            <img \n                src={rgb}\n                alt=\"volume renderer for medical imaging\"\n                class=\"w-600 m-auto\"\n            />\n\n            <p>The dataset loaded in the above screenshots was taken from \n                <a href=\"https://figshare.com/articles/dataset/Patient34/6265679?backTo=/collections/FUMPE/4107803\"> FigShare </a>\n            and was uploaded by Mojtaba Masoudi.</p>\n\n            <h2>Implementation Overview</h2>\n            <p>This was implemented using Qt and C++.</p>\n\n            <h3>Data Loading and Processing</h3>\n            <p>The application allows a user to load in a series of DICOM images. Once the directory is selected, the file tags are then parsed to identify the width, height, rescale intercept and rescale slope values. For each file, the raw pixel values are read and converted to Hounsfield units (HU) with the following formula :</p>\n            <p class=\"text-center font-serif my-2\">HU = pixelValue * rescaleSlope + rescaleIntercept</p>\n            <p>Note that Hounsfield units are a relative quantitative measurement of radio density used in CT scans.</p>\n\n            <h3>Volume Rendering</h3>\n            <p>The volume rendering is implemented through a ray-cast approach. For each pixel on the screen, a ray is cast from the camera origin to the pixel and through the voxel data. If the ray intersects the data volume, then the data is sampled along the ray with grid marching. For each sample, the transmittance <p class=\"font-serif inline\">T </p>\n            and color <p class=\"font-serif inline\">C</p> is updated based on the density (calculated from Hounsfield unit) and color at the current voxel. If the data is to be rendered using a RGB color map, then voxels with Hounsfield unit values falling within the selected range will be linearly interpolated between five predefined colors (yellow to red) to obtain the voxel color.</p>\n\n            <h2>Third Party Libraries Used</h2>\n            <ul>\n                <li>DCMTK: for loading and processing of DICOM files</li>\n                <li>ctkRangeSlider: for implementing a range slider in Qt</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default VolumeRenderer;","import React from \"react\";\nimport custom1 from \"../images/computer-graphics/path-tracer.png\"\n\nconst PathTracer = () => {\n    return (\n        <div>\n            <figure class=\"inline-block w-full m-auto mb-6\">\n                    <img src={custom1} alt=\"custom scene render 1\" class=\"m-auto w-1/2 clear-both\"/>\n                    <figcaption class=\"text-center my-2 italic\">Custom scene rendered with full light integrator; 600 x 600 px, 400 samples/pixel, max 5 recursions</figcaption>\n            </figure>\n\n            This is a Monte Carlo path tracer implemented in C++ that renders images by computing both the direct and global\n            illumination at each ray intersection. Multiple importance sampling is used to sample the direct lighting\n            and russian roulette ray termination is implemented as well.\n            <br/> <br/>\n            Features supported by the path tracer include:\n\n            <ul>\n                <li>Materials\n                    <ul>\n                        <li>Lambertian materials</li>\n                        <li>Microfacet materials (e.g. rough mirrors)</li>\n                        <li>Specular materials (e.g. glass, smooth mirrors)</li>\n                    </ul>\n                </li>\n                <li>Lights\n                    <ul>\n                        <li>Area lights</li>\n                        <li>Point lights</li>\n                        <li>Spot lights</li>\n                    </ul>\n                </li>\n                <li>Thin lens camera</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default PathTracer;","import React from \"react\";\n\nconst GPUPathTracer = () => {\n    return (\n        <div class=\"mt-6\">\n            This is a GPU-based path tracer created using OpenGL and Qt. It implements the same concepts in the\n            Monte Carlo Path Tracer but allows for real time rendering. \n            <br/> <br/>\n            Features supported by the path tracer include:\n            <ul>\n                <li>Materials\n                    <ul>\n                        <li>Lambertian materials</li>\n                        <li>Microfacet materials (e.g. rough mirrors)</li>\n                        <li>Specular materials (e.g. glass, smooth mirrors)</li>\n                    </ul>\n                </li>\n                <li>Lights\n                    <ul>\n                        <li>Area lights</li>\n                        <li>Environment lighting</li>\n                    </ul>\n                </li>\n            </ul>   \n        </div>\n    )\n}\n\nexport default GPUPathTracer;","import React from \"react\";\n\nconst FaceSwap = () => {\n    return (\n        <div>\n            <h2>Overview</h2>\n\n            This project was completed with two other collaborators as our final project for a computer vision class. \n            The goal of this project is to automatically detect and swap faces in two arbitrary videos while accounting for lighting/exposure/shadows differences to produce visually appealing results.\n            It was implemented using Python and the OpenCV library. \n\n            <h2>Technical Approach</h2>   \n            <h3>1. Landmark detection</h3> \n            <p>\n                We first establishing a set of corresponding feature locations in screen space between the source image and the target image. \n                such that the eyes in the source can be correctly mapped onto the eyes in the target and so on. \n                For this task, we utilized a DLib facial detector that maps a template of 68 facial landmarks onto a detected face. \n            </p>\n\n            <h3>2. Feature extraction</h3>\n            <p>\n                We define a convex hull that acts as a mask encapsulating the landmarks detected in the previous step to ensure only a small portion \n                of the source image is retargeted onto the target image. \n            </p>\n\n            <h3>3. Delaunay Triangulation</h3>\n            <p>\n                In order to warp the image onto the target face accurately, we first need to triangulate the mask defined. This is completed with the Delaunay Triangulation method that ensures \n                the areas of the triangles in this triangulation are maximally equal.\n            </p>\n\n            <h3>4. Warping</h3>\n            <p>\n                With triangulations for both images created, we are now able to apply affine transformations to the coordinates of the triangle vertices in the source image mask to reshape it into the shape of the mask in the target image. \n                Each of these triangles are warped according to the transformation matrix which yields a warped version of the source mask that is ready to be overlaid on top of the target mask.\n            </p>\n\n            <h3>5. Face Swapping</h3>\n            <p>\n                With the source mask warped and transformed, all that is required is just to overlay the mask on top of the target image and paint in the pixels into that mask. This is done by just drawing the mask over the center of the bounding box of the target mask.\n            </p>\n\n            <h3>6. Gradient Domain Blending</h3>\n            <p>\n                To blend the source face with the target image more smoothly, the built-in cv2 seamlessClone() function was used to implement gradient domain blending. \n                This allows us to make the face swap appear more natural by accounting for changes in exposure, lighting, etc.\n            </p>\n        </div>\n    )\n}\n\nexport default FaceSwap;","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Card from \"../components/Card\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\n\nimport volumeRenderer from \"../images/computer-graphics/volume-renderer.png\";\nimport pathTracer from \"../images/computer-graphics/path-tracer.png\";\nimport faceSwap from \"../images/computer-graphics/face-swap.gif\";\nimport meshEditor from \"../images/computer-graphics/mesh-editor.png\";\nimport gpuPathTracer from \"../images/computer-graphics/gpu-path-tracer.gif\";\nimport beatTheIllusion from \"../images/computer-graphics/beat-the-illusion.png\"; \nimport beatTheIllusionVideo from \"../images/computer-graphics/beat-the-illusion.mp4\";\nimport pbrShaders from \"../images/computer-graphics/pbr-shaders.png\";\nimport shaderCards from \"../images/computer-graphics/opengl-shaders.png\";\nimport shaderVideo from \"../images/computer-graphics/opengl-shaders.mp4\";\n\nimport VolumeRenderer from \"../components/VolumeRenderer\";\nimport PathTracer from \"../components/PathTracer\";\nimport GPUPathTracer from \"../components/GPUPathTracer\";\nimport FaceSwap from \"../components/FaceSwap\";\n\nconst ComputerGraphics = () => {\n    return (\n        <div class=\"h-min-screen bg-white-smoke\">\n            <Helmet>\n                <title>Nicole Chau - Computer Graphics</title>\n                <meta name=\"description\" content=\"Nicole Chau Portfolio - Computer Graphics\" />\n            </Helmet>\n\n            <Navbar page=\"/computer-graphics/\"/>\n            <div class=\"w-4/5 lg:min-w-3/5 m-auto h-min-screen\">\n            <h1 class=\"pt-16 text-navy\">computer graphics</h1>\n            <div class=\"flex flex-wrap justify-evenly gap-4 lg:gap-8 mt-10\">\n                <Card\n                    color=\"bg-card-blue\"\n                    image={volumeRenderer}\n                    title=\"Volume Renderer for Medical Imaging\" \n                    skills={[\"C++\", \"Qt\"]}\n                    year=\"2023\"\n                    link=\"https://github.com/nicole-chau/volume-renderer\"\n                    video=\"https://player.vimeo.com/video/844289996\"\n                    description={<VolumeRenderer/>}\n                    />\n                <Card\n                    color=\"bg-card-pink\"\n                    image={pathTracer}\n                    title=\"Monte Carlo Path Tracer\" \n                    skills={[\"C++\", \"Qt\"]}\n                    year=\"2022\"\n                    description={<PathTracer/>}/>\n                <Card \n                    color=\"bg-card-tan\"\n                    image={gpuPathTracer}\n                    title=\"GPU-based Path Tracer\" \n                    skills={[\"OpenGL\", \"Qt\"]}\n                    year=\"2022\"\n                    video=\"https://player.vimeo.com/video/844805583\"\n                    description={<GPUPathTracer/>}/>\n                <Card \n                    color=\"bg-card-tan\"\n                    image={faceSwap}\n                    title=\"Face Swapping in Videos\" \n                    skills={[\"Python\"]}\n                    year=\"2022\"\n                    link=\"https://drive.google.com/file/d/1u_r8S4tTZFnA1SFUXDFhdajp_tIJeyeh/view?usp=sharing\"\n                    video=\"https://player.vimeo.com/video/844683590\"\n                    description={<FaceSwap/>}/>\n                <Card \n                    color=\"bg-card-blue\"\n                    image={beatTheIllusion}\n                    title=\"'Beat the Illusion' Game\" \n                    skills={[\"Unreal\", \"C++\"]}\n                    year=\"2022\"\n                    description={\n                    <>\n                        <video width=\"1800\" controls class=\"mb-8\">\n                            <source src={beatTheIllusionVideo} type=\"video/mp4\" />\n                            Your browser does not support the video tag.\n                        </video>\n\n                        Beat the Illusion is a puzzle game that challenges perception through optical illusions based on\n                        the shape and color of 3D geometry. Combining elements of problem-solving and memory, the player must try to “beat the illusion”\n                        and manipulate the game environment to determine which shapes are identical in actuality.\n                        <br/><br/>\n                        There are three types of shapes in the game - rectangular prisms, cylinders and cones - which can be \n                        either red, green or blue. The main goal of the \n                        game is match as many shapes together as possible before losing all lives. Lives are lost when a falling shape \n                        is incorrectly or not matched. The challenge of the game is created through the illusion of different 3D shapes\n                        appearing as the same 2D shape from different angles. Players must switch the camera angle during the game\n                        to correctly identify the 3D shape. Additionally, colored lights that shine on the shapes will make the \n                        shapes' original colors appear different. \n                        <br/><br/>\n                        This game was created with one other collaborater as part of a Game Design course. \n                    </>}\n                    />\n                <Card \n                    color=\"bg-card-pink\"\n                    image={meshEditor}\n                    title=\"Mini 3D Mesh Editor\" \n                    skills={[\"C++\", \"Qt\"]}\n                    year=\"2021\"\n                    video=\"https://player.vimeo.com/video/644563239\"\n                    description={\n                        <div class=\"mt-6\">\n                            This is a mini 3D mesh editor implemented using C++ and Qt. A half-edge data structure is used to store the mesh data which includes \n                            vertices, half-edges and faces. Pointeres are also stored to relate the different mesh components and to allow for mesh traversal. \n                            Each edge is represented by two half-edges, one from each adjacent face. \n                \n                            <br/> <br/>\n                            Implemented features include: \n                            <ul>\n                                <li>Mesh component editing</li>\n                                <li>Catmull-Clark subdivision</li>\n                                <li>OBJ and JSON file loading</li>\n                                <li>Mesh deformation with linear blend skinning</li>\n                                <li>Planarity testing (face is automatically triangulated once it becomes non planar as a result of editing vertices)</li>\n                                <li>Sharp edges and vertices (select a checkbox next to any number of vertices/edges/faces in the GUI to tag it as a sharp vertex/edge/face when the mesh is smoothed\n                                    ; after subdivision all vertices/edges/faces are reset to not being sharp)\n                                </li>\n                            </ul>\n                        </div>}\n                    />\n                <Card \n                    color=\"bg-card-tan\"\n                    image={pbrShaders}\n                    title=\"Physically-Based Shaders\" \n                    skills={[\"OpenGL\", \"Qt\"]}\n                    year=\"2022\"\n                    video=\"https://player.vimeo.com/video/845628830\"\n                    description={\n                        <div class=\"mt-6\">\n                            This is an implementation of a physically-based shader in OpenGL and Qt completed as a project\n                            for an Advanced Rendering course. This includes implementing\n                            the Cook-Torrance BRDF, Lambertian BRDF, diffuse irradiance and glossy irradiance. \n                            <br/> <br/>\n                            References:\n                            <ul>\n                                <li>\n                                    <a href=\"https://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\">Real Shading in Unreal Engine 4</a>\n                                </li>\n                                <li>\n                                    <a href=\"https://learnopengl.com/PBR/IBL/Diffuse-irradiance\">Learn OpenGL: Diffuse Irradiance</a>\n                                </li>\n                                <li>\n                                    <a href=\"https://learnopengl.com/PBR/IBL/Specular-IBL\">Learn OpenGL: Specular IBL</a>\n                                </li>\n                            </ul>\n                        </div>}\n                    />\n                <Card \n                    color=\"bg-card-blue\"\n                    image={shaderCards}\n                    title=\"OpenGL Shaders\" \n                    skills={[\"OpenGL\", \"Qt\"]}\n                    year=\"2021\"\n                    description={<>\n                        <video width=\"1800\" controls class=\"mb-8\">\n                            <source src={shaderVideo} type=\"video/mp4\" />\n                            Your browser does not support the video tag.\n                        </video>\n                        <p>\n                            Implementation of various surface shaders and post-process shaders in OpenGL. \n                            <br/><br/>\n                            <ul>\n                                <li>Surface shaders\n                                    <ul>\n                                        <li>Lambert</li>\n                                        <li>Blinn-Phong</li>\n                                        <li>Matcap</li>\n                                        <li>Color gradient</li>\n                                        <li>Vertex deformation</li>\n                                    </ul>\n                                </li>\n                                <li>Post-process shaders\n                                    <ul>\n                                        <li>Grayscale</li>\n                                        <li>Gaussian blur</li>\n                                        <li>Sobel</li>\n                                        <li>Bloom</li>\n                                        <li>Worley noise</li>\n                                    </ul>\n                                </li>\n                            </ul>\n                        </p>\n                    </>}\n                    />\n            </div>\n            </div>\n\n            <Footer />\n        </div>\n    )\n}\n\nexport default ComputerGraphics;"],"names":["color","image","title","year","link","skills","subtitle","video","modalImgs","description","descriptionFirst","showModal","setShowModal","useState","class","type","onClick","src","map","skill","tag","href","img","frameborder","allow","allowfullscreen","svgStyle","target","width","height","id","xmlns","viewBox","fill","d","grayscale","alt","rgb","custom1","Helmet","name","content","Navbar","page","Card","volumeRenderer","pathTracer","gpuPathTracer","faceSwap","beatTheIllusion","controls","beatTheIllusionVideo","meshEditor","pbrShaders","shaderCards","shaderVideo","Footer"],"sourceRoot":""}